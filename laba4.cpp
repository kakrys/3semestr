<<<<<<< HEAD
//—ортировка методом прочесывани€
=======
..—ортировка методом прочесывани€
>>>>>>> master
//¬ лучшем случае сложность O(nlog(n)), в худшем Ц O(n2).
#include <iostream>
#include <cstdlib>
#include <vector>
#include <ctime>

/*  
ѕервоначальный разрыв между сравниваемыми берем с учЄтом специальной величины называемой фактором уменьшени€, оптимальное значение которой равно примерно 1.2473309. 
—начала рассто€ние между элементами равно размеру массива разделЄнного на фактор уменьшени€ (результат округл€етс€ до ближайшего целого). 
«атем, пройд€ массив с этим шагом, мы снова делим шаг на фактор уменьшени€ и проходим по списку вновь. 
“ак продолжаетс€ до тех пор, пока разность индексов не достигнет единицы. ¬ этом случае массив досортировываетс€ обычным пузырьком.
*/

void combSort(std::vector<int>& array)
{
	int gap = array.size();
	bool flag = true;

	while (gap != 1 || flag == true)
	{
		gap = (gap) / 1.3; // фактор уменьшени€, который вычисл€етс€ данным способом, но можно и напр€мую использовать 1.247
		if (gap < 1)
			gap = 1;
		flag = false;

		for (int i = 0; i < array.size() - gap; i++)
		{
			if (array[i] > array[i + gap])
			{
				std::swap(array[i], array[i + gap]);
				flag = true;
			}
		}
	}
}
int main()
{
	srand(static_cast <unsigned int> (time(0))); // ¬рем€ сис. часов(где компилируют)
	setlocale(LC_ALL, "RUS");
	int N;
	std::vector <int> mas;
	std::cout << "¬ведите число рандомных чисел в массиве = ";
	std::cin >> N;
	for (int i = 0; i < N; i++)
	{
		mas.push_back(rand());
	}
	std::cout << "\n ћассив чисел без сортировки:\n";
	for (int i = 0; i < mas.size(); i++)
	{
		std::cout << mas[i] << " ";
	}
	std::cout << "\n ћассив чисел после сортировки:\n";
	combSort(mas);
	for (int i = 0; i < mas.size(); i++)
	{
		std::cout << mas[i] << " ";
	}
<<<<<<< HEAD
}
=======
}
>>>>>>> master
